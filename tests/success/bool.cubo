/*
 * Copyright (c) 2019 Bruno Bentzen. All rights reserved.
 * Released under the Apache License 2.0 (see "License");
 * Author: Bruno Bentzen
 */
 
import ./function.cubo 

/* Boolean */
 
def bneg
⊢ bool → bool :=
λ b, if b false true
 
def band
⊢ bool → bool → bool :=
λ b b', if b (if b' true false) (if b' false false)
 
def bor
⊢ bool → bool → bool :=
λ b b', if b (if b' true true) (if b' true false)
 
def bimpl
⊢ bool → bool → bool :=
λ b b', if b (if b' true false) (if b' true true)
 
def bnand
⊢ bool → bool → bool :=
λ b b', if b (if b' false true) (if b' true true)
 
def bnor
⊢ bool → bool → bool :=
λ b b', if b (if b' false false) (if b' false true)
 
/* Boolean equations */

def bool_neq 
⊢ ¬ path bool true false :=
λ p, coe i0 i1 (λ i, if (p @ i) unit void) ()

def bool_neq'
⊢ ¬ path bool false true :=
λ p, coe i1 i0 (λ i, if (p @ i) unit void) ()
 
def bneg_inv (b : bool)
⊢ path bool (app bneg (app bneg b)) b :=
if b (<i> true) (<i> false)
 
def band_comm (b b' : bool)
⊢ path bool (app (app band b) b') (app (app band b') b) :=
if b (if b' (<_> true) (<_> false)) (if b' (<_> false) (<_> false))
 
def band_assoc (b b' b'' : bool)
⊢ path bool (app (app band b) (app (app band b') b'')) (app (app band (app (app band b) b')) b'') :=
if b 
  (if b' (if b'' (<_> true) (<_> false)) (if b'' (<_> false) (<_> false))) 
  (if b' (if b'' (<_> false) (<_> false)) (if b'' (<_> false) (<_> false)))
 
def bor_comm (b b' : bool)
⊢ path bool (app (app bor b) b') (app (app bor b') b) :=
if b (if b' (<_> true) (<_> true)) (if b' (<_> true) (<_> false))
 
def bor_assoc (b b' b'' : bool)
⊢ path bool (app (app bor b) (app (app bor b') b'')) (app (app bor (app (app bor b) b')) b'') :=
if b 
  (if b' (if b'' (<_> true) (<_> true)) (if b'' (<_> true) (<_> true))) 
  (if b' (if b'' (<_> true) (<_> true)) (if b'' (<_> true) (<_> false)))

/* Path structure (code-decode) */

def bool_code (b b' : bool)
⊢ type 1 :=
if b (if b' (path bool true true) void) (if b' void (path bool false false))
 
def bool_eq (b b' : bool)
⊢ path bool b b' ↔ app app bool_code b b' :=
if b 
  (if b' id_iff_id (bool_neq, absurd)) 
  (if b' (bool_neq', absurd) id_iff_id)



