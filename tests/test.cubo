/* this is a test */

def k_combinator (A B : type 1)
⊢ A → B → A :=
λ x, λ y, x

/*** 

def k_combinator (A B : type 1)
⊢ A → B → A :=
λ x, λ y, x

def s_combinator (A B C : type 1)
⊢ (A → B → C) → (A → B) → (A → C) :=
λ f, λ g, λ x, app (app f x) (app g x)


-------------------------------------------------------

Checker.elaborate
[("A", Ast.Type 1); ("B", Ast.Π  ("v?", Ast.Id "A", Ast.Type 1));
 ("f", Ast.Π  ("x", Ast.Id "A", Ast.App (Ast.Id "B", Ast.Id "x")));
 ("a", Ast.Id "A"); ("b", Ast.Id "A");
 ("p", Ast.Pathd (Ast.Abs ("i", Ast.Id "A"), Ast.Id "a", Ast.Id "b"))]
(Ast.App (Ast.Id "B", Ast.Id "a")) 1
(Ast.App (Ast.Id "f", Ast.Id "a"));;


------

Checker.elaborate
[("A", Ast.Type 1); ("B", Ast.Π  ("v?", Ast.Id "A", Ast.Type 1));
 ("f", Ast.Π  ("x", Ast.Id "A", Ast.App (Ast.Id "B", Ast.Id "x")));
 ("a", Ast.Id "A"); ("b", Ast.Id "A");
 ("p", Ast.Pathd (Ast.Abs ("i", Ast.Id "A"), Ast.Id "a", Ast.Id "b"))]
(Ast.Placeholder "0") 1
(Eval.eval (Ast.App ((Ast.Abs ("i", Ast.App (Ast.Id "B", Ast.At (Ast.Id "p", Ast.Id "i")))), Ast.I1())));;

**/
