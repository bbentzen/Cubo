/** iterated pis **/

def dp22m {A : type 1} {B : A → type 1} {w1 w1' w2 w2' : Σ (x : A) app B x} (p : path (Σ (x : A) app B x) w1 w2) (q : path (Σ (x : A) app B x) w1 w1) (r : path (Σ (x : A) app B x) w2 w2)
⊢ Π (j i : I) A := 
λ i, coe i0 j (λ x, app B (app app (hfill (λ i, fst (p @ i)) | i0 →  λ j, fst (q @ j) | i1 → λ j, fst (r @ j)) x i)) (snd (p @ i)) 


/** this is correctly rejected, but error message could be improved **/

def com {A : I → type 1} {a b : app A i0} {c d : app A i1} (p : pathd (λ j, app A j) a c) (q : path (app A i0) a b) (r : path (app A i1) c d) 
⊢ I → Π (ijk : I) app A ijk := 
λ k, 
hcom (λ i, coe i k (λ i, app A i) (p @ i))
 | i0 →  (λ j, coe j k (λ i, app A i) (q @ j)) 
 | i1 → (λ j, coe i1 k (λ i, app A i) (r @ j)) 


/* this cannot be recognized as a type because we need a heterogeneous composition at the snd clause */
 
def pr_hcom2 {A : type 1} {B : A → type 1} {w1 w1' w2 w2' : Σ (x : A) app B x} (p : path (Σ (x : A) app B x) w1 w2) (q : path (Σ (x : A) app B x) w1 w1') (r : path (Σ (x : A) app B x) w2 w2') (i : I)
⊢ Σ (x : A) app B x := 
(app (hcom (λ i, fst (p @ i)) | i0 →  λ j, fst (q @ j) | i1 → λ j, fst (r @ j)) i, 
 app (hcom (λ i, snd (p @ i)) | i0 →  λ j, snd (q @ j) | i1 → λ j, snd (r @ j)) i)

/* i.e. λ i, snd (p @ i) : I → app B (fst (p @ i));
        λ i, snd (q @ i) : I → app B (fst (q @ i));
        λ i, snd (r @ i) : I → app B (fst (r @ i))  */ 

def product_hcom {A : type 1} {B : A → type 1} {w1 w1' w2 w2' : Σ (x : A) app B x} (p : path (Σ (x : A) app B x) w1 w2) (q : path (Σ (x : A) app B x) w1 w1') (r : path (Σ (x : A) app B x) w2 w2') (i : I)
⊢ path (Σ (x : A) app B x) 
  (app (hcom (λ i, p @ i) | i0 →  λ j, q @ j | i1 → λ j, r @ j) i) 
  (app (hcom (λ i, fst (p @ i)) | i0 →  λ j, fst (q @ j) | i1 → λ j, fst (r @ j)) i, 
   app (hcom (λ i, snd (p @ i)) | i0 →  λ j, snd (q @ j) | i1 → λ j, snd (r @ j)) i) := 
<_> app (hcom (λ i, p @ i) | i0 →  λ j, q @ j | i1 → λ j, r @ j) i

/* variable renaming bug */

def sum_eq {A B : type 1} (v v' : A + B)
⊢ path (A + B) v v' ↔ app app sum_code v v' :=
case v 
  (λ x, case v' (λ x', _) _) 
  (λ y, case v' _ _)

def sum_eq {A B : type 1} (v v' : A + B)
⊢ path (A + B) v v' ↔ app app app app sum_code A B v v' :=
case v 
  (λ y, case v' 
    (λ y', iff_id) (λ y', sum_neq)) 
  (λ y, case v' (λ y', sum_neq') (λ y', iff_id))

/** { } cannot infer type **/

def sum_code {A B : type 1} (v v' : A + B)
⊢ type 1 :=
case v (λ x, case v' (λ x', path (A + B) (inl x) (inl x')) (λ _, void)) (λ y, case v' (λ _, void) (λ y', path (A + B) (inr y) (inr y')))
  
def sum_eq {A B : type 1} (v v' : A + B)
⊢ app app sum_code v v' :=
_

def sum_eq {A B : type 1}
⊢ λ v, λ v', 
  case v 
  (λ x, case v' (λ x', path (A + B) (inl x) (inl x')) (λ _, void)) 
  (λ y, case v' (λ _, void) (λ y', path (A + B) (inr y) (inr y'))) :=
_ 

/* test if this works with nat */

def sumsasae (A B : type 1) (v v' : A + B)
⊢ ??1 :=
case v (λ x, path (A + B) (inl x) (inl x)) (λ _, void) 

/** Fatal error: exception Failure("Lex error: *") ***/

open ./success/all.cubo
 
open ./success/function.cubo
 
/** Stack overflow **/

def tsts {A : I → type 1} 
⊢ Π (k : I) app A k := 
λ jk, app 
jk
jk 


/** TODO: 
- cannot open an already opened file
- coe type computation rules
- hcom
- universe levels: id, num, max lvl lvl
- refl direct handling 
- holes _ should try all possible combinations
- λ id id, notation for iterated lambda sigmas pis

-De Brujin variables
-Better lexer/parser error messages
-Fix Enter bug
-Line comments
-Use juxtaposition for App

**/
