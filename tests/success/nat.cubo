/*
 * Copyright (c) 2019 Bruno Bentzen. All rights reserved.
 * Released under the Apache License 2.0 (see "License");
 * Author: Bruno Bentzen
 */
 
open ./function.cubo 

/* Natural numbers */
 
def pred
⊢ nat → nat :=
λ n, natrec n 0 (λ k _, k)
 
def add
⊢ nat → nat → nat :=
λ m n, natrec n m (λ k f, succ f)
 
def mult 
⊢ nat → nat → nat := 
λ m n, natrec n 0 (λ k f, (natrec f m (λ k, λ g, succ g)))
 
/* Equations */
 
def add_zero (m : nat)
⊢ path nat (app (app add 0) m) m :=
natrec m (<_> 0) (λ n p , <i> succ (p @ i))

def nat_eq_succ {n m : nat}
⊢ path nat (succ n) (succ m) → path nat n m :=
λ p, <i> natrec (p @ i) n (λ k _, k)
 
def pred_succ {n : nat}
⊢ path nat (app pred (succ n)) n :=
<_> n
 
 /**
def succ_pred {n : nat} (w : Σ (k : nat) path nat (succ k) n)
⊢ path nat (succ (app pred n)) n :=
coe i0 i1 (λ i, path nat (succ (app pred (snd w @ i))) (snd w @ i)) (<_> succ (fst w)) **/
 
def succ_pred2 {n : nat} (w : Σ (k : nat) path nat (succ k) n)
⊢ path nat (succ (app pred n)) n := 
<v2> app 
hcom (λ v3, coe v3 v2 (λ _, nat) (coe i0 i1 (λ _, nat) ((<_> succ (fst w)) @ v3 ) ))
    | i0 → λ _, coe i0 v2 (λ _, nat) (succ (natrec (snd w @ i0) 0 (λ k _, k) ) ) 
    | i1 → λ _, coe i1 v2 (λ _, nat) snd w @ i0 
v2 
 
def nat_neq {n : nat}
⊢ ¬ path nat 0 (succ n) :=
λ p, coe i0 i1 (λ i, natrec (p @ i) unit (λ _ _, void)) ()

def nat_neq' {n : nat}
⊢ ¬ path nat (succ n) 0 :=
λ p, coe i1 i0 (λ i, natrec (p @ i) unit (λ _ _, void)) ()

/* Code-decode */

def nat_code (n m : nat)
⊢ type 1 :=
natrec n 
  (natrec m (path nat 0 0) (λ _ _, void)) 
  (λ n' C, natrec m void (λ m' _, path nat succ n' succ m'))
 
def nat_eq {n m : nat}
⊢ path nat n m ↔ app app nat_code n m :=
natrec n
 (natrec m id_iff_id (λ k _, (nat_neq, absurd)))
 (λ k _, natrec m (nat_neq', absurd) (λ k' _, id_iff_id))

