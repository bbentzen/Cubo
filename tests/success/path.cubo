/*
 * Copyright (c) 2019 Bruno Bentzen. All rights reserved.
 * Released under the Apache License 2.0 (see "License");
 * Author: Bruno Bentzen
 */
 
open ./connection.cubo 
open ./function.cubo 

/* Path introduction and elimination */

def pathd_abs {A : I → type 1} (p : Π (i : I) app A i)
⊢ pathd A (app p i0) (app p i1) :=
<i> app p i
 
def pathd_app {A : I → type 1} (a : app A i0) (b : app A i1) (p : pathd A a b)
⊢ Π (i : I) app A i :=
λ i, p @ i
 
/* Relefixity, symmetry and transitivity */
 
def path_rfl {A : type 1} {a : A} 
⊢ path A a a :=
<_> a
 
def path_symm {A : type 1} {a b : A} (p : path A a b)
⊢ path A b a := 
<k> app 
hcom (λ i, a)
 | i0 →  λ j, p @ j
 | i1 → λ _, a 
k 
 
def path_trans {A : type 1} {a b c : A} (p : path A a b) (q : path A b c)
⊢ path A a c := 
<k> app 
hcom (λ i, p @ i) 
 | i0 →  λ _, a 
 | i1 → λ j, q @ j 
k 
 
/** Path induction **/

def coe_path {A : type 1} (C : A → type 1) {a b : A} (p : path A a b) (c : app C a)
⊢ app C b :=
coe i0 i1 (λ i, app C (p @ i)) c
 
def coe_path' {A : type 1} {C : A → type 1} {a b : A} (p : path A a b) (c : app C b)
⊢ app C a :=
coe i1 i0 (λ i, app C (p @ i)) c
 
def pathrec {A : type 1} {a : A} (C : Π (x : A) (path A a x → type 1)) {b : A} (p : path A a b) (c : app app C a (<_> a)) 
⊢ app app C b p := 
coe i0 i1 (λ i, app app C (p @ i) (app meet p @ i)) c 
 
/** Regularity **/
 
def coe_boundary {C : I → type 1} (i : I) (c : app C i) 
⊢ path (app C i) (coe i i C c) c :=
<_> c
 
def coe_regularity {A : type 1} (i j : I) (a : A) 
⊢ path A (coe i j (λ _, A) a) a :=
<_> a
 
def hcom_regularity {A : type 1} {a b : A} (p : path A a b)
⊢ path (path A a b) 
  p 
  (<k> app 
  hcom (λ i, p @ i)
   | i0 →  λ j, a 
   | i1 → λ j, b 
  k ) := 
<_> p
 
/** Proof irrevelance **/

def irrel_uip {A : type 1} {a b : A} (p q : path A a b)
⊢ path (path A a b) p q :=
<_> p
 
def irrel_line {A : type 1} {a b : A} (p q : path A a b)
⊢ path (Π (x : I) A) (λ i, p @ i) (λ j, q @ j) :=
<_> (λ i, p @ i)
 
def irrel_k {A : type 1} {a : A} (p : path A a a)
⊢ path (path A a a) p (<_> a) :=
<_> p
 
def irrel_example {A : type 1} {a b : A} {B : path A a b → (Π (x : I) A) → type 1} (p q : path A a b) 
⊢ app app B p (λ i, p @ i) →  app app B q (λ j, q @ j) :=
id
 
def irrel_example2 {A : type 1} (i j : I) {a b : A} (p q : I → path A a b)
⊢ path (path A a b) (app p i) (app q j) :=
<_> app p i
 
/** Strict groupoid structure **/
 
def path_trans_lc {A : type 1} {a b : A} (p : path A a b) 
⊢ path (path A a a) (p · p⁻¹) (<_> a) := 
<_> <_> a
 
def path_trans_rc {A : type 1} {a b : A} (p : path A a b) 
⊢ path (path A b b) (p⁻¹ · p) (<_> b) := 
<_> <_> b
 
def path_trans_lu {A : type 1} {a b : A} (p : path A a b) 
⊢ path (path A a b) p ((<_> a) · p) := 
<_> p
 
def path_trans_ru {A : type 1} {a b : A} (p : path A a b) 
⊢ path (path A a b) p (p · <_> b) := 
<_> p
 
def path_symm_inv {A : type 1} {a b : A} (p : path A a b)
⊢ path (path A a b) p (p ⁻¹⁻¹) := 
<_> p
    
def path_trans_assoc {A : type 1} {a b c d : A} (p : path A a b) (q : path A b c) (r : path A c d)
⊢ path (path A a d) (p · q · r) ((p · q) · r) := 
<_> p · q · r
 
