/*
 * Copyright (c) 2019 Bruno Bentzen. All rights reserved.
 * Released under the Apache License 2.0 (see "License");
 * Author: Bruno Bentzen
 */
 
/* Product type */
 
def pr1 {A B : type 1}
⊢ (A × B) → A :=
λ w, fst w
 
def pr2 {A B : type 1}
⊢ (A × B) → B :=
λ w, snd w
 
def pair {A B : type 1}
⊢ A → B → A × B :=
λ x, λ y, (x, y)
 
def prod_swap {A B : type 1}
⊢ (A × B) → (B × A) :=
λ w, (snd w, fst w)
 
def prod_assoc {A B C : type 1}
⊢ A × B × C ↔ (A × B) × C :=
(λ w, ((fst w, fst (snd w)), snd (snd w)),
 λ w, (fst (fst w), (snd (fst w), snd w)))
 
def prod_distrib_fst {A B C : type 1}
⊢ ((A → C) × (B → C)) → ((A × B) → C) :=
λ w w', app (fst w) (fst w')
 
def prod_distrib_snd {A B C : type 1}
⊢ ((A → C) × (B → C)) → ((A × B) → C) :=
λ w w', app (snd w) (snd w')
 
def curry {A B C : type 1}
⊢ ((A × B) → C) → (A → B → C) :=
λ f, (λ x y, app f (x, y))
 
def cocurry {A B C : type 1}
⊢ (A → (B × C)) → (A → B → C) :=
λ f, (λ x _, snd (app f x))
 
def lnc {A B : type 1}
⊢ ¬ (A × ¬A) :=
λ f, app (snd f) (fst f)
 
def prod_up {A B C : type 1}
⊢ (C → A × B) ↔ (C → A) × (C → B) :=
(λ f, (λ x, fst (app f x), λ x, snd (app f x)),
 λ w x, (app (fst w) x, app (snd w) x))
 
def fun_to_neg_prod {A B : type 1}
⊢ (A → B) → ¬ (A × ¬ B) :=
λ f w, app (snd w) (app f (fst w))
 
def neg_fun_to_neg_prod {A B : type 1}
⊢ (A → ¬B) → ¬(A × B) :=
λ f w, app (app f (fst w)) (snd w)
 
def neg_prod_to_neg_fun {A B : type 1}
⊢ ¬(A × B) → (A → ¬B) :=
λ f x y, app f (x,y)
 
def prod_to_neg_fun_1 {A B : type 1}
⊢ (A × B) → ¬(A → ¬B) :=
λ w f, app (app f (fst w)) (snd w)
  
/* Dependent product type */
 
def sigma_intro {A B : type 1} {C : A → type 1} (a : A) (u : app C a)
⊢ Σ (x : A) app C x :=
(a, u)
 
def sigma_prod_distrb1 {A B : type 1} {C : A → type 1}
⊢ (B × Σ (x : A) app C x) → Σ (x : A) (B × app C x) :=
λ w, (fst (snd w), (fst w, snd (snd w)))
 
def sigma_prod_distrb2 {A B : type 1} {C : A → type 1}
⊢ (Σ (x : A) (B × app C x)) → (B × Σ (x : A) app C x) :=
λ w, (fst (snd w), (fst w, snd (snd w)))
 
def sigma_sum_distrb {A B : type 1} {C : A → type 1}
⊢ (Σ (x : A) B + app C x) → (B + Σ (x : A) app C x) :=
λ w, case (snd w) (λ x, inl x) (λ y, inr (fst w, y))
 
def sigma_prod_distrb {A : type 1} {B C : A → type 1}
⊢ (Σ (x : A) app B x × app C x) → (Σ (x : A) app B x) × (Σ (x : A) app C x) :=
λ w, ((fst w, fst (snd w)), (fst w, snd (snd w)))
 
def pi_to_not_sigma {A B : type 1} {C : A → type 1}
⊢ (Π  (x : A) app C x) → ¬(Σ (x : A) ¬app C x) :=
λ f w, app (snd w) (app f (fst w))
 
def pi_not_to_not_sigma {A B : type 1} {C : A → type 1}
⊢ (Π  (x : A) ¬app C x) → ¬(Σ (x : A) app C x) :=
λ f w, app (app f (fst w)) (snd w)
 
def sigma_to_not_pi  {A B : type 1} {C : A → type 1}
⊢ (Σ (x : A) app C x) → ¬(Π (x : A) ¬app C x) :=
λ w f, app (app f (fst w)) (snd w)
 
def not_sigma_to_pi_not {A B : type 1} {C : A → type 1}
⊢ (¬(Σ (x : A) app C x)) → (Π (x : A) ¬ app C x) :=
λ f x y, app f (x, y)
 
def sigma_not_to_not_pi {A : type 1} {C : A → type 1}
⊢ (Σ (x : A) ¬ app C x) → ¬ (Π  (x : A) app C x) :=
λ w f, app (snd w) (app f (fst w))
 
def sigma_pi_exchg {A B : type 1} {C : A → B → type 1}
⊢ (Σ (x : A) (Π  (y : B) app (app C x) y)) -> (Π  (y : B) (Σ (x : A) app (app C x) y)) :=
λ w y, (fst w, app (snd w) y)
 
/* Paths */
 
def pair_eq {A B : type 1} (a a' : A) (b b' : B)
⊢ path A a a' × path B b b' ↔ path (A × B) (a, b) (a', b') :=
(λ w, <i> (fst w @ i, snd w @ i),
 λ p, (<i> fst (p @ i), <j> snd (p @ j)))
 
/* Homogeneous composition */
  
def product_hcom {A B : type 1} {w w' : A × B} (p : path (A × B) w w') (i : I)
⊢ path (A × B) 
  (app (hcom (λ _, w) | i0 →  λ _, w | i1 → λ j, p @ j) i) 
  (app (hcom (λ _, fst w) | i0 →  (λ _, fst w) | i1 → λ j, fst (p @ j)) i, 
   app (hcom (λ _, snd w) | i0 →  (λ _, snd w) | i1 → λ j, snd (p @ j)) i) := 
<_> app (hcom (λ _, w) | i0 →  λ _, w | i1 → λ j, p @ j) i
 
